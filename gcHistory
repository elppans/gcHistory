#!/bin/bash

vdate=20172003

#TXT
  case $LANG in
   pt*) GCHMSG001="Não pode ser root!"
GCHMSG002="O path Wine já existe!"
GCHMSG003="Máquina virtual criada com sucesso..."
GCHMSG004="Falha ao criar a máquina virtual para o jogo!"
GCHMSG005="Deve escolher o instalador do Grand Chase History para ser instalado!"
GCHMSG006="O Grand Chase History já está instalado!"
GCHMSG007="A instalar o Grand Chase History..."
GCHMSG008="Durante a instalação, DESMARQUE a opção \"Criar um ícone na área de trabalho\"..."
GCHMSG009="Após a instalação, DESMARQUE a opção \"Executar Grand Chase History\"..."
GCHMSG010="Execute o jogo através do ícone criado no menú!"
GCHMSG011="Iniciando o instalador..."
GCHMSG012="Deve escolher o instalador do Grand Chase History para ser reinstalado!"
GCHMSG013="A preparar Backup do Grand Chase History..."
GCHMSG014="Copiando o Grand Chase History para o cache de Backup..."
GCHMSG015="O Backup foi criado com sucesso!"
GCHMSG016="O Backup não foi criado com sucesso!"
GCHMSG017="O Backup não foi criado com sucesso!"
GCHMSG018="A reinstalar o Grand Chase History..."
GCHMSG019="Durante a reinstalação, DESMARQUE a opção \"Criar um ícone na área de trabalho\"..."
GCHMSG020="Iniciando o instalador..."
GCHMSG021="Use a opção {-i|--install} para instalar o Grand Chase History!"
GCHMSG022="A excluir o Backup do Grand Chase History..."
GCHMSG023="O Backup não foi removido!"
GCHMSG024="O Backup foi removido com sucesso!"
GCHMSG025="A pasta de Backup do Grand Chase History não existe!"
GCHMSG026="Removendo a instalação atual do Grand Chase History..."
GCHMSG027="Restaurando o Backup..."
GCHMSG028="A restauração foi feita com sucesso..."
GCHMSG029="Removendo a pasta de Backup..."
GCHMSG030="A restauração foi quebrada!"
GCHMSG031="A restauração foi quebrada!"
GCHMSG032="Não existe backup a ser restaurado!"
GCHMSG033="O atalho para o Grand Chase History já existe..."
GCHMSG034="Deseja sobrescrever e atualizar o atalho para \"Grand Chase History\"? (s/N)"
GCHMSG035="Opção inválida!"
GCHMSG036="O atalho \"Grand Chase History\" será mantido!"
GCHMSG037="O atalho \"Grand Chase History\" foi atualizado..."
GCHMSG038="para usar, acesse o menú do sistema, na categoria \"Game\"!"
GCHMSG039="Opção inválida, digite $0 {-h|--help} para mais informações!"
GCHMSG040="Atalho para o Grand Chase History criado com sucesso"
GCHMSG041="Acesse o Menú do sistema, na categoria \"Game\" para abrir o jogo!"
GCHMSG042="Falha ao criar o atalho Grand Chase History!"
GCHMSG043="O atalho do Grand Chase History não foi removido!"
GCHMSG044="O atalho do Grand Chase History foi removido com sucesso!"
GCHMSG045="O atalho para o Grand Chase History não existe ou já foi removido!"
GCHMSG046="O atalho do Grand Chase History Main não foi removido!"
GCHMSG047="O atalho do Grand Chase History Main foi removido com sucesso!"
GCHMSG048="O atalho para o Grand Chase History Main não existe ou já foi removido!"
GCHMSG049="O jogo Grand Chase History não foi removido com exito!"
GCHMSG050="O jogo Grand Chase History foi removido com sucesso!"
GCHMSG051="O jogo Grand Chase History não existe ou já foi removido!"
GCHMSG052="O jogo Grand Chase History depende da máquina virtual para rodar..."
GCHMSG053="Tem certeza que quer remover a máquina virtual?"
GCHMSG054="Digite uma das opções [Sim(S)|Não(N)] : "
GCHMSG055="A Máquina Virtual do \"Grand Chase History\" será mantido!"
GCHMSG056="Removendo a máquina virtual do Grand Chase History..."
GCHMSG057="A Máquina Virtual do \"Grand Chase History\" foi removido com exito!"
GCHMSG058="A Máquina Virtual do \"Grand Chase History\" não foi removido com sucesso!"
GCHMSG059="Opção inválida, digite $0 {-h|--help} para mais informações!"
GCHMSG060="A Máquina Virtual do \"Grand Chase History\" não existe ou já foi removido!"
GCHMSG061="Lendo informações do seu monitor:
"
GCHMSG062="
Informe a resolução desejada para a Área de trabalho Virtual..."
GCHMSG063="Se omitido, será configurado para "1280x1024"..."
GCHMSG064="Para desativar a àrea de Trabalho Virtual, digite "off" no lugar da resolução.
"
GCHMSG065="Resolução do Monitor Virtual [ "off" para desativado ] : "
GCHMSG066="Listando resoluções suportadas do monitor..."
GCHMSG067='
gcHistory, um aplicativo CLI para ajudar a jogar Grand Chase History em sistemas "não nativos" de sua origem.
Uso: gcHistory [OPÇÃO]... [EXE]...

Argumentos obrigatórios para opções longas também o são para as opções curtas.

	Se omitido, iniciará o jogo via Launcher!


  -h,   --help                         Emite esta ajuda
  -d,   --debug                        Executa o jogo em DEBUG MODE
  -i,   --install {Instalador.exe}     Instala o jogo em seu Usuário Atual
  -ri,  --reinstall  {Instalador.exe}  Faz um Backup do jogo instalado e reinstala por cima
  -rb,  --remove-backup                Remove o backup criado durante a instalação do jogo
  -re,  --restore-backup               Remove o jogo reinstalado e restaura usando o Backup no lugar
  -f,   --fix, --fix-shortcuts         Instala/atualiza um atalho do Launcher e Main no menú do sistema
  -rs,  --remove-shortcuts             Remove o atalho do Launcher e do Main do menú do sistema
  -rg,  --remove-game                  Remove o jogo por completo de seu Usuário Atual
  -wt,  --winetricks                   Abre o configurador Winetricks em modo GUI
  -xt,  --xterm                        Abre o Terminal XTERM usando a máquina virtual do Grand Chase History.
  -mcl, --monitor-config-list          Lista resoluções suportadas do monitor para usar no jogo
  -mcs, --monitor-config-set           Carrega o jogo com a resolução definida [ Ao sair do jogo retorna a resolução anterior ]
  -mcf, --monitor-config-fix           Configura o Monitor para carregar o jogo no modo FullScreen Automático. [ Resolução do jogo deve estar em 1680x1050 ]
  -mcu, --monitor-config-unfix         Desativa a configuração do Monitor modo FullScreen automático para o carregamento padrão
  -mos, --monitor-output-set           Configura o TIPO DE SAÍDA do Monitor usando especificação manual ou automático
  -cvm, --create-virtual-machine       Cria a Máquina Virtual do Wine para que possa instalar e jogar o Grand Chase History
  -rvm, --remove-virtual-machine       Remove a Máquina Virtual do Wine de forma recursiva. [Cuidado ao usar esta opção]
  -svd, --set-virtual-desktop          Ativa o Desktop Virtual do Wine e configura sua resolução [ off para desativar ]
  -V,   --version                      Mostra a versão do Wine e aplicação e sai

  Alguns Exemplos:

  Instalar o jogo Grand Chase History

  gcHistory -i /caminho/setup.exe

  Apenas executar o jogo:

  gcHistory

  Listar resolução suportada do monitor:

  gcHistory -mcl

  Executar o jogo com uma resolução suportada definida, para o exemplo 1280x720:

  Se você definir uma resolução errada, o jogo roda com a resolução anteriormente definida
  A resolução do jogo deve ser EXATAMENTE o mesmo que a resolução escolhida.
  Se omitido, será setado automaticamente para a resolução 1680x1050


  gcHistory -mcs 1280x720

'
GCHMSG068="Erro ao completar o comando...
Digite "$0" {-h|--help} para mais informações!"
GCHMSG069="\n Escolha o método de configuração para o monitor:\n
 0 = Especificar manualmente o Modo suportado e conectado do monitor.
 1 = Método de detexão automática usando o parâmetro "primary"
 2 = Método de detexão automática usando o parâmetro "connected"
 3 = Método de detexão automática usando o parâmetro "listactivemonitors" [RECOMENDÁVEL]
"
GCHMSG070=" Digite o número correspondente ao método escolhido: "
GCHMSG071=" Escolhido o método número"
GCHMSG072=" Lista de monitores (Conectados e desconectados)...\n"
GCHMSG073=" Digite o nome da saída do monitor listado com o estado de (CONECTADO): "
GCHMSG074="Saída informada inválida!"
GCHMSG075="Parametro errado..."
 ;;
   *) GCHMSG001="Don’t use this script as root"
GCHMSG002="The path for wine already exist!"
GCHMSG003="Successfully created virtual machine..."
GCHMSG004="Failed to create Virtual Machine"
GCHMSG005="Selection of Grand Chase History’s Setup needed for installation!"
GCHMSG006="Grand Chase History already installed"
GCHMSG007="Installing Grand Chase History..."
GCHMSG008="While in the setup/installation wizard window, uncheck the box: \“Create icon in the desktop\”..."
GCHMSG009="After done the instalation, UNCHECK the option: \“Execute Grand Chase History\”..."
GCHMSG010="Start the game using the new icon created in the menu!"
GCHMSG011="Launching setup"
GCHMSG012="Grand Chase History’s setup needed for reinstallation!"
GCHMSG013="Setting Grand Chase History’s backup  ..."
GCHMSG014="Started Grand Chase History’s backup ..."
GCHMSG015="Backup done!"
GCHMSG016="Backup failed!"
GCHMSG017="Backup failed!"
GCHMSG018="Reinstalling game..."
GCHMSG019="While in the setup/installation wizard window, uncheck the box: \“Create icon in the desktop\”..."
GCHMSG020="Starting the installer..."
GCHMSG021="Use {-i|--install} to start installation of Grand Chase History!"
GCHMSG022="Removing Backup..."
GCHMSG023="Failed to remove backup!"
GCHMSG024="Backup removed!"
GCHMSG025="Backup folder does not exist!"
GCHMSG026="Removing Grand Chase History..."
GCHMSG027="Restoring Backup..."
GCHMSG028="Backup restored..."
GCHMSG029="Removing Backup..."
GCHMSG030="Restoration Stopped!"
GCHMSG031="Restoration stopped!"
GCHMSG032="There is no backup!"
GCHMSG033="The shortcut for the game already exists!"
GCHMSG034="Overwrite the shortcute for \"Grand Chase History\"? (y/N)"
GCHMSG035="Invalid input!"
GCHMSG036="The shortcut \"Grand Chase History\" will remain!"
GCHMSG037="The shortcut \"Grand Chase History\" was updated..."
GCHMSG038="Search for the shortcut in the game’s category in the system’s menu!"
GCHMSG039="Invalid input, type $0 {-h|--help} for more information!"
GCHMSG040="Shortcut created!"
GCHMSG041="Search for the shortcut in the game’s category in the system’s menu!"
GCHMSG042="Failed to create shortcut!"
GCHMSG043="Failed to remove shortcut!"
GCHMSG044="Shortcut remove!"
GCHMSG045="No shortcut found!"
GCHMSG046="Failed to remove Grand chase’s main shortcut!"
GCHMSG047="Grand Chase’s main shortcut removed"
GCHMSG048="No Grand Chase’s main shortcut found!"
GCHMSG049="Failed to remove Grand Chase History!"
GCHMSG050="Grand Chase History removed!"
GCHMSG051="Grand Chase History not installed or already removed!"
GCHMSG052="Grand Chase History depends on virtual machine (wine’s prefix for grand chase) in order to run..."
GCHMSG053="Remove virtual machine?"
GCHMSG054="Type [Yes(Y)|No(N)] : "
GCHMSG055="Virtual machine will remain"
GCHMSG056="Removing Virtual Machine..."
GCHMSG057="Virtual Machine removed!"
GCHMSG058="Failed to remove Virtual Machine!"
GCHMSG059="Invalid input, type $0 {-h|--help} for more information!"
GCHMSG060="Virtual Machine not found!"
GCHMSG061="Gathering monitor’s :
"
GCHMSG062="
Enter the desired resolution for the Virtual Desktop ..."
GCHMSG063="The default resolution is "1280x1024"..."
GCHMSG064="Type "off" to deactivate virtual desktop mode.
"
GCHMSG065="Virtual Desktop’s resolution[ "off" to deactivate] : "
GCHMSG066="Listing supported resolutions..."
GCHMSG067='
gcHistory, an automated script, that uses a custom version of wine configured to run grand chase.
Use: gcHistory [Option]... [EXE]...

Arguments required for long options also needed for short options.

	If not, run with the Launcher!

  -h,   --help                        Open the help
  -d,   --debug                       Run the game in DEBUG MODE
  -i,   --install {Instalador.exe}    Install the game in your profile
  -ri,  --reinstall {Instalador.exe}  Make a backup and reinstall the game
  -rb,  --remove-backup               Remove the backup created during the game installation
  -re,  --restore-backup              Remove the reinstalled game and restore the backup on place
  -f,   --fix, --fix-shortcuts        Install/update a launcher shortcut and menu shortcut
  -rs,  --remove-shortcuts            Remove the laucher shortcut and menu shortcut
  -rg,  --remove-game                 Remove the game of your profile
  -wt,  --winetricks                  Open the winetricks configuration in GUI mode
  -xt,  --xterm                       Open the XTERM Terminal using the Grand Chase History Virtual Machine
  -mcl, --monitor-config-list         List of supported resolutions of monitor to use in the game
  -mcs, --monitor-config-set          Load the game with the defined resolution [Go back to previous resolution after quit the game]
  -mcf, --monitor-config-fix          Configure the monitor to load the game in fullscreen automatically [Game resolution should be in 1680x1050]
  -mcu, --monitor-config-unfix        Disable the fullscreen mode configuration of monitor to default loading
  -mos, --monitor-output-set           Configura o TIPO DE SAÍDA do Monitor usando especificação manual ou automático
  -cvm, --create-virtual-machine      Create the Wine Virtual Machine to install and play Grad Chase History
  -rvm, --remove-virtual-machine      Remove Wine Virtual Machine recursively {Be careful with this option]
  -svd, --set-virtual-desktop         Enable the Wine Virtual Desktop and configure the resolution [off to disable]
  -V,   --version                     Show the Wine version and application.

  Some Examples:

  Install the game Grand Chase History:

  gcHistory -i /path/setup.exe

  Only run the game:

  gcHistory

  List the supported monitor resolutions:

  gcHistory -mcl

  Run the game with a defined supported resolution, for example 1280x720:
  If you set the wrong resolution, the game runs with the resolution previously set
  The game resolution must be EXACTLY the same as the resolution selected
  If omitted, it is automatically set to the resolution 1680x1050


  gcHistory -mcs 1280x720

'
GCHMSG068="Invalid imput...
Type "$0" {-h|--help} for more Information!"
GCHMSG069="\n Escolha o método de configuração para o monitor:\n
 0 = Especificar manualmente o Modo suportado e conectado do monitor.
 1 = Método de detexão automática usando o parâmetro "primary"
 2 = Método de detexão automática usando o parâmetro "connected"
 3 = Método de detexão automática usando o parâmetro "listactivemonitors" [RECOMENDÁVEL]
"
GCHMSG070=" Digite o número correspondente ao método escolhido: "
GCHMSG071=" Escolhido o método número"
GCHMSG072=" Lista de monitores (Conectados e desconectados)...\n"
GCHMSG073=" Digite o nome da saída do monitor listado com o estado de (CONECTADO): "
GCHMSG074="Saída informada inválida!"
GCHMSG075="Parametro errado..."
 ;;
  esac
#TXT

#NCFG
NXMON=1,398
NOUTP=1,310
NDEFA=314
NDEFB=1,314
#NCFG

if [ `id -u` = 0 ];then
	echo "$GCHMSG001"
	exit
fi

# Monitor Auto SET [ 0 = OFF | 1 = ON ]
XMONCFG=0

## Monitor OUTPUT MODE

# Modo que deve usar para a conexão padrão do monitor:

# 0 = Especificar manualmente na linha com o parâmetro "DEFAULT" o Modo suportado e conectado do monitor. Para saber qual é, faça o comando xrandr no terminal
# 1 = Método de detexão automática usando o parâmetro "primary"
# 2 = Método de detexão automática usando o parâmetro "connected"
# 3 = Método de detexão automática usando o parâmetro "listactivemonitors" [RECOMENDÁVEL]

OUTPUTMON=3

 [ "$OUTPUTMON" = "0" ] && \
{

# Especifique manualmente o modo do monitor aqui:

DEFAULT=VGA-0

}

RLSET=`readlink -m "$2"`

INSTDIR=`dirname $0`

cd $INSTDIR 
PWDIR=`pwd`

WINEX=wine

WINDIR="$PWDIR/bin"
WINLIB="$PWDIR/lib"
#WINLIB64="$PWDIR/lib64"
GCPMD="$PWDIR/gcmd"
GCPATH="$PWDIR/gchmod"
GCVD="$GCPATH/.vdate"
GCS32="$PWDIR/gchmod/drive_c/windows/system32"
GCDIR="$GCPATH/drive_c/Program Files/Grand Chase History"
GCEXEC="$GCDIR/GrandChase.exe"
GCMEXEC="$GCDIR/main.exe"
WININST=`readlink -m "$0"`

export PATH="$WINDIR:$PATH"
export LD_LIBRARY_PATH="$WINLIB:$LD_LIBRARY_PATH"
#export LD_LIBRARY_PATH="$WINLIB64:$LD_LIBRARY_PATH"
export WINEARCH="win32"
#export WINEARCH="win64"
EXDLL=""
#"wmp=n;quartz=n;wmvcore=n;winegstreamer=;devenum=b"

if ( which rsync ) >> /dev/null
  then
	CPYNC="rsync -dhar --info=progress2"
  else
	CPYNC="cp -u -a -f"
fi

if [ -z "$1" ];then
	[ "$XMONCFG" = 1 ] && \
 {
	bash "$0" -mcs
	exit 0
 }

   # UPD gcHistory
wget -O .vdate -q --show-progress --progress=dot https://github.com/elppans/gcHistory/raw/master/.vdate
echo ""
GCVDC=`cat "$GCVD"`
if [ -e "$GCVD" ];then
if [ "$vdate" != "$GCVDC" ];then
	WINEPREFIX="$GCPATH" xterm -e "$0" --update
fi
fi
   # UPD gcHistory

	export WINEDLLOVERRIDES="$EXDLL"
	export WINEDEBUG="fixme-all,err-all,warn+cursor,-all"
	cd "$GCDIR"
	WINEPREFIX="$GCPATH" "$WINEX" "$GCEXEC"
   else
 case "$1" in
	-cvm|--create-virtual-machine)
	export WINEDEBUG="fixme-all,err-all,warn+cursor,-all"
if [ -d "$GCPATH" ];then
	echo "$GCHMSG002"
	exit 0
   else
	WINEPREFIX="$GCPATH" winepath
	WINEPREFIX="$GCPATH" winetricks winxp --optout
	#WINEPREFIX="$GCPATH" wine regsvr32 $GCDIR/mailmime.dll (mfc42 = dll dinâmico)
	#WINEPREFIX="$GCPATH" winetricks -q dotnet40 --optout

	WINEPREFIX="$GCPATH" winetricks -q mfc42 --optout
	WINEPREFIX="$GCPATH" winetricks -q vcrun6 --optout
	WINEPREFIX="$GCPATH" winetricks -q wmv9vcm --optout
	WINEPREFIX="$GCPATH" winetricks -q quartz --optout

	WINEPREFIX="$GCPATH" winetricks --force -q dotnet45 --optout
	#WINEPREFIX="$GCPATH" winetricks --force -q dotnet456 --optout
	WINEPREFIX="$GCPATH" winetricks --force -q wmp9 --optout
	WINEPREFIX="$GCPATH" winetricks --force -q allfonts --optout
	#WINEPREFIX="$GCPATH" winetricks -q vcrun2015 --optout
	WINEPREFIX="$GCPATH" winetricks --force win7 --optout
	[ -d $GCS32 ] && \
			{
		$CPYNC "$GCS32/quartz.dll" "$GCS32/quartz.dll.old"; # Acertar
		$CPYNC "$GCS32/quartz.dll" "$GCPMD/quartz.dll"; # Acertar
			}
  if [ -d "$GCPATH" ];then
	echo "$GCHMSG003"
	read -t 5
     else
	echo "$GCHMSG004"
	exit 0
  fi
fi
	exit 0
  ;;
	-d|--debug)
	export WINEDLLOVERRIDES="$EXDLL"
	export WINEDEBUG=""
	cd "$GCDIR"
	WINEPREFIX="$GCPATH" "$WINEX" "$GCEXEC"
  ;;
	-i|--install)
   if [ -z "$2" ];then
	echo "$GCHMSG005"
	exit 0
   fi
	if [ -d "$GCDIR" ];then
	echo "$GCHMSG006"
	exit 0
		else
	clear
	echo "$GCHMSG007"
	read -t 2
	echo "$GCHMSG008"
	read -t 3
	echo "$GCHMSG009"
	read -t 3
	echo "$GCHMSG010"
	read -t 5
	echo "$GCHMSG011"
	read -t 3
	export WINEDEBUG="fixme-all,err-all,warn-cursor,-all"
	mkdir -p $GCPATH
	WINEPREFIX="$GCPATH" "$WINEX" "$RLSET"
    if ( whereis nproc | grep bin ) >> /dev/null ;then
	NCPU=`nproc`
      else
	NCPU=$(cat /proc/cpuinfo | egrep "core id|physical id" | tr -d "\n" | sed s/physical/\\nphysical/g | grep -v ^$ | sort | uniq | wc -l)
    fi

	ECPU=1

    if [ "$NCPU" -gt "$ECPU" ];then
	regedit gcmd/CSMTON_PSMOFF.reg
     else
	regedit gcmd/CSMTOFF_PSMOFF.reg
    fi
	#$CPYNC "$GCDIR/NewOption.dat" "$GCDIR/NewOption.dat.old"
	###$CPYNC "$PWDIR/gcmd/NewOption.dat" "$GCDIR"
	[ -d "$HOME/.local/share/applications/wine/Programs/Grand Chase History" ] && \
			{
		rm -rf "$HOME/.local/share/applications/wine/Programs/Grand Chase History" >> /dev/null
			}
    if [ -d "$GCDIR" ];then
	bash "$0" --fix-shortcuts 
    fi
	fi
  ;;
	-ri|--reinstall)
   if [ -z "$2" ];then
	echo "$GCHMSG012"
	exit 0
   fi
	if [ -d "$GCDIR" ];then
	echo "$GCHMSG013"
	read -t 3
	mkdir -p "$GCPATH/gch_bkp"
	GCHBKP="$GCPATH/gch_bkp"
	GCHBKPB="$GCHBKP/Grand Chase History"
	echo "$GCHMSG014"
	$CPYNC "$GCDIR" "$GCHBKP"
	read -t 5
  if [ -d "$GCHBKPB" ];then
	GCHD=`du -hs "$GCDIR" | cut -d "/" -f "1"`
	GCHB=`du -hs "$GCHBKPB" | cut -d "/" -f "1"`
	echo ""$GCDIR""
	echo ""$GCHBKPB""
	echo "Grand Chase History: "$GCHB" > Backup: "$GCHD""
   if [ "$GCHD" == "$GCHB" ];then
	echo "$GCHMSG015"
	read -t 3
                else
	echo "$GCHMSG016"
	exit 0
   fi
    else
	echo "$GCHMSG017"
	exit 0
  fi
	echo "$GCHMSG018"
	read -t 2
	echo "$GCHMSG019"
	read -t 5
	echo "$GCHMSG020"
	read -t 3
	export WINEDEBUG="fixme-all,err-all,warn-cursor,-all"
	mkdir -p $GCPATH
	WINEPREFIX="$GCPATH" "$WINEX" "$RLSET"
    if ( whereis nproc | grep bin ) >> /dev/null ;then
	NCPU=`nproc`
      else
	NCPU=$(cat /proc/cpuinfo | egrep "core id|physical id" | tr -d "\n" | sed s/physical/\\nphysical/g | grep -v ^$ | sort | uniq | wc -l)
    fi

	ECPU=1

    if [ "$NCPU" -gt "$ECPU" ];then
	regedit gcmd/CSMTON_PSMOFF.reg
     else
	regedit gcmd/CSMTOFF_PSMOFF.reg
    fi
	###$CPYNC "$PWDIR/gcmd/NewOption.dat" "$GCDIR"
	[ -d "$HOME/.local/share/applications/wine/Programs/Grand Chase History" ] && \
			{
		rm -rf "$HOME/.local/share/applications/wine/Programs/Grand Chase History" >> /dev/null
			}
    if [ -d "$GCDIR" ];then
	bash "$0" --fix-shortcuts 
    fi
		else
	echo "$GCHMSG021"
	exit 0
	fi
  ;;
	-rb|--remove-backup)
    GCHBKP="$GCPATH/gch_bkp"
    GCHBKPB="$GCHBKP/Grand Chase History"
if [ -d "$GCHBKPB" ];then
	echo "$GCHMSG022"
	rm -R -f "$GCHBKPB"
  if [ -d "$GCHBKPB" ];then
	echo "$GCHMSG023"
	exit 0
		else
	echo "$GCHMSG024"
	exit 0
  fi
    else
	echo "$GCHMSG025"
	exit 0
fi
  ;;
	-re|--restore-backup)
    GCHBKP="$GCPATH/gch_bkp"
    GCHBKPB="$GCHBKP/Grand Chase History"
if [ -d "$GCHBKPB" ];then
	echo "$GCHMSG026"
	read -t 3
	rm -R -f "$GCDIR"
	echo "$GCHMSG027"
	$CPYNC "$GCHBKP" "$GCDIR"
  if [ -d "$GCDIR" ];then
	GCHD=`du -hs "$GCDIR" | cut -d "/" -f "1"`
	GCHB=`du -hs "$GCHBKPB" | cut -d "/" -f "1"`
	echo "Backup: "$GCHD" > Grand Chase History: "$GCHB""
   if [ "$GCHD" == "$GCHB" ];then
	echo "$GCHMSG028"
	read -t 3
	echo "$GCHMSG029"
	rm -R -f "$GCHBKPB"
                else
	echo "$GCHMSG030"
	echo "Backup: "$GCHD" > Grand Chase History: "$GCHB""
	exit 0
   fi
    else
	echo "$GCHMSG031"
	exit 0
  fi
	else
	echo "$GCHMSG032"
	exit
fi
  ;;
	-f|--fix|--fix-shortcuts)
    SCAPP="$HOME/.local/share/applications"

if [ -e "$SCAPP/GrandChaseHistory.desktop" ];then
##SHORT=Y
if [ -z "$2" ];then
###SHORTGC
	echo "$GCHMSG033"
	read -p "$GCHMSG034" SHORTGC
  if [ -z $SHORTGC ];then
	SHORTGC="N"
  fi
###SHORTGC
else
 if [ "$2" = "-y" ];then

	SHORTGC="Y"
     else
  if [ "$2" = "-Y" ];then
	SHORTGC="Y"
    else
	echo "$GCHMSG035"
	exit 0
  fi
 fi
fi
##SHORT=Y
  case $SHORTGC in
		n|N|no|No|NO|nO|não|Não|nÂo|nãO)
	echo "$GCHMSG036"
	sleep 3
		;;
		s|S|y|Y|yes|Yes|yEs|yeS|sim|Sim|sIm|siM)
	rm -rf "$SCAPP/GrandChaseHistory.desktop"
	touch "$SCAPP/GrandChaseHistory.desktop"
	echo -e "[Desktop Entry]" >> "$SCAPP/GrandChaseHistory.desktop"
	echo -e "Encoding=UTF-8" >> "$SCAPP/GrandChaseHistory.desktop"
	echo -e "Name="Grand Chase History"" >> "$SCAPP/GrandChaseHistory.desktop"
	echo -e "Comment="Grand Chase History on Linux"" >> "$SCAPP/GrandChaseHistory.desktop"
	echo -e "Type=Application" >> "$SCAPP/GrandChaseHistory.desktop"
	echo "Exec=$WININST" >> "$SCAPP/GrandChaseHistory.desktop"
	echo "Icon="$PWDIR/ico/GrandChase"" >> "$SCAPP/GrandChaseHistory.desktop"
	echo -e "Name[fr_FR]=GrandChase" >> "$SCAPP/GrandChaseHistory.desktop"
	echo -e "Terminal=OFF" >> "$SCAPP/GrandChaseHistory.desktop"
	echo -e "Categories=Game;" >> "$SCAPP/GrandChaseHistory.desktop"
	chmod +x "$SCAPP/GrandChaseHistory.desktop"
	echo "$GCHMSG037"
	echo "$GCHMSG038"
	read -t 3
		;;
		*)
	echo "$GCHMSG039"
	exit 0
		;;
  esac
   else
	touch "$SCAPP/GrandChaseHistory.desktop"
	echo -e "[Desktop Entry]" >> "$SCAPP/GrandChaseHistory.desktop"
	echo -e "Encoding=UTF-8" >> "$SCAPP/GrandChaseHistory.desktop"
	echo -e "Name="Grand Chase History"" >> "$SCAPP/GrandChaseHistory.desktop"
	echo -e "Comment="Grand Chase History on Linux"" >> "$SCAPP/GrandChaseHistory.desktop"
	echo -e "Type=Application" >> "$SCAPP/GrandChaseHistory.desktop"
	echo "Exec=$WININST" >> "$SCAPP/GrandChaseHistory.desktop"
	echo "Icon="$PWDIR/ico/GrandChase"" >> "$SCAPP/GrandChaseHistory.desktop"
	echo -e "Name[fr_FR]=GrandChase" >> "$SCAPP/GrandChaseHistory.desktop"
	echo -e "Terminal=OFF" >> "$SCAPP/GrandChaseHistory.desktop"
	echo -e "Categories=Game;" >> "$SCAPP/GrandChaseHistory.desktop"
	chmod +x "$SCAPP/GrandChaseHistory.desktop"

 if [ -e "$SCAPP/GrandChaseHistory.desktop" ];then
	echo "$GCHMSG040"
	echo "$GCHMSG041"
   else
	echo "$GCHMSG042"
	exit 0
 fi

fi
	exit 0
  ;;
	-rs|--remove-shortcuts)
    SCAPP="$HOME/.local/share/applications"
if [ -e "$SCAPP/GrandChaseHistory.desktop" ];then
	rm -rf "$SCAPP/GrandChaseHistory.desktop"
  if [ -e "$SCAPP/GrandChaseHistory.desktop" ];then
	echo "$GCHMSG043"
	exit 0
     else
	echo "$GCHMSG044"
  fi
   else
	echo "$GCHMSG045"
	exit 0
fi

if [ -e "$SCAPP/GrandChaseHistoryMain.desktop" ];then
	rm -rf "$SCAPP/GrandChaseHistoryMain.desktop"
  if [ -e "$SCAPP/GrandChaseHistoryMain.desktop" ];then
	echo "$GCHMSG046"
	exit 0
     else
	echo "$GCHMSG047"
  fi
   else
	echo "$GCHMSG048"
	exit 0
fi
	exit 0
  ;;
	-rg|--remove-game)
if [ -d "$GCDIR" ];then
	rm -rf "$GCDIR"
 if [ -d "$GCDIR" ];then
	echo "$GCHMSG049"
	exit 0
    else
	echo "$GCHMSG050"
	bash "$0" --remove-shortcuts
 fi
   else
	echo "$GCHMSG051"
	exit 0
fi
  ;;
	-rvm|--remove-virtual-machine)
if [ -d "$GCPATH" ];then
	echo "$GCHMSG052"
	echo "$GCHMSG053"
	read -p "$GCHMSG054" GCRVM
   case $GCRVM in
		n|N|no|No|NO|nO|não|Não|nÂo|nãO)
	echo "$GCHMSG055"
	sleep 3
		;;
		s|S|y|Y|yes|Yes|yEs|yeS|sim|Sim|sIm|siM)
	echo "$GCHMSG056"
	read -t 3
	rm -rfv "$GCPATH"
 if [ -d "$GCPATH" ];then
	echo "$GCHMSG057"
	exit 0
    else
	echo "$GCHMSG058"
 fi
		;;
		*)
	echo "$GCHMSG059"
	exit 0
		;;
esac
   else
	echo "$GCHMSG060"
	exit 0
fi
  ;;
  	-wt|--winetricks)
	WINEPREFIX="$GCPATH" winetricks
  ;;
	-xt|--xterm)
	WINEPREFIX="$GCPATH" xterm
  ;;
	-svd|--set-virtual-desktop)
	clear

	VIRTDESKDIM="$2"

	echo "$GCHMSG061"

	read -t 3

	WINEPREFIX="$GCPATH" xrandr

	read -t 3

	echo "$GCHMSG062"
	echo "$GCHMSG063"
	echo "$GCHMSG064"
	read -p "$GCHMSG065" VIRTDESKDIM

if [ -z "$VIRTDESKDIM" ];then
	WINEPREFIX="$GCPATH" winetricks vd=off
	read -t 3
	WINEPREFIX="$GCPATH" winetricks vd="1280x1024"
	exit 0
 else
  if [ "$VIRTDESKDIM" = "off" ];then
	WINEPREFIX="$GCPATH" winetricks vd=off
	exit 0
   else
	WINEPREFIX="$GCPATH" winetricks vd="$VIRTDESKDIM"
	exit 0
  fi
fi

  ;;
	-mcl|--monitor-config-list)
	echo "$GCHMSG066"
	xrandr --q1
	exit 0
  ;;
	-mcs|--monitor-config-set)
XYCFG=$2
XCFG00=1680x1050
XCFG01=`xrandr|awk 'BEGIN {} /^.*\*/{printf("%s;", $1)} END {}' | cut -d ";" -f "1"`

echo "$XCFG01" > "$GCPMD/xmon.cfg"

if [ -z "$XYCFG" ] ; then

	[ "$OUTPUTMON" = "1" ] && \
 {
DEFAULT=$(xrandr|awk 'BEGIN {} /^.*primary/{printf("%s;", $1)} END {}' | cut -d ";" -f "1")
 }
	[ "$OUTPUTMON" = "2" ] && \
 {
DEFAULT=$(xrandr | head -3 |grep "connected" | awk '{print $1}' | cut -d " " -f "1" | tail -n 1)
 }
	[ "$OUTPUTMON" = "3" ] && \
 {
DEFAULT=$(xrandr --listactivemonitors | cut -d "+" -f "2" | cut -d " " -f "1" | tail -n 1)
 }


xrandr --output "$DEFAULT" --mode "$XCFG00"

	export WINEDLLOVERRIDES="$EXDLL"
	export WINEDEBUG="fixme-all,err-all,warn+cursor,-all"
	cd "$GCDIR"
	WINEPREFIX="$GCPATH" "$WINEX" "$GCEXEC"
xrandr --output "$DEFAULT" --mode `cat $GCPMD/xmon.cfg`

else

	[ "$OUTPUTMON" = "1" ] && \
 {
DEFAULT=$(xrandr|awk 'BEGIN {} /^.*primary/{printf("%s;", $1)} END {}' | cut -d ";" -f "1" )
 }
	[ "$OUTPUTMON" = "2" ] && \
 {
DEFAULT=$(xrandr | head -3 |grep "connected" | awk '{print $1}' | cut -d " " -f "1" | tail -n 1 )
 }

xrandr --output "$DEFAULT" --mode "$XYCFG"

	export WINEDLLOVERRIDES="$EXDLL"
	export WINEDEBUG="fixme-all,err-all,warn+cursor,-all"
	cd "$GCDIR"
	WINEPREFIX="$GCPATH" "$WINEX" "$GCEXEC"
	read -t 30

xrandr --output "$DEFAULT" --mode `cat "$GCPMD"/xmon.cfg`

fi
  ;;
	-mcf|--monitor-config-fix)
	sed -i ""$NXMON"s/XMONCFG=0/XMONCFG=1/g" "$0"

  ;;
	-mcu|--monitor-config-unfix)
	sed -i ""$NXMON"s/XMONCFG=1/XMONCFG=0/g" "$0"
  ;;
	-mos|--monitor-output-set)
	clear
	echo -e "$GCHMSG069"
	read -p "$GCHMSG070" MOSCFG
   case $MOSCFG in
	0)
	clear
	echo -e ""$GCHMSG071" \""$MOSCFG"\"\n"
	sed -i ""$NOUTP"s/OUTPUTMON=1/OUTPUTMON=0/g" "$0"
	sed -i ""$NOUTP"s/OUTPUTMON=2/OUTPUTMON=0/g" "$0"
	sed -i ""$NOUTP"s/OUTPUTMON=3/OUTPUTMON=0/g" "$0"
	echo -e "$GCHMSG072"	
	xrandr | grep connected
	echo -e "\n"
	read -p "$GCHMSG073" MOSLIST
    if ( xrandr | grep "$MOSLIST" );then
	NDEFACFG=`head -n "$NDEFA" "$0" | grep DEFAULT= | cut -d "=" -f "2"`
	sed -i ""$NDEFB"s/DEFAULT="$NDEFACFG"/DEFAULT="$MOSLIST"/g" "$0"
      else
	echo -e "$GCHMSG074"
	exit 0
    fi
	exit 0
	;;
	1) echo -e ""$GCHMSG071" \""$MOSCFG"\"\n"
	sed -i ""$NOUTP"s/OUTPUTMON=0/OUTPUTMON=1/g" "$0"
	sed -i ""$NOUTP"s/OUTPUTMON=2/OUTPUTMON=1/g" "$0"
	sed -i ""$NOUTP"s/OUTPUTMON=3/OUTPUTMON=1/g" "$0"
	exit 0
	;;
	2) echo -e ""$GCHMSG071" \""$MOSCFG"\"\n"
	sed -i ""$NOUTP"s/OUTPUTMON=0/OUTPUTMON=2/g" "$0"
	sed -i ""$NOUTP"s/OUTPUTMON=1/OUTPUTMON=2/g" "$0"
	sed -i ""$NOUTP"s/OUTPUTMON=3/OUTPUTMON=2/g" "$0"
	exit 0
	;;
	3) echo -e ""$GCHMSG071" \""$MOSCFG"\"\n"
	sed -i ""$NOUTP"s/OUTPUTMON=0/OUTPUTMON=3/g" "$0"
	sed -i ""$NOUTP"s/OUTPUTMON=1/OUTPUTMON=3/g" "$0"
	sed -i ""$NOUTP"s/OUTPUTMON=2/OUTPUTMON=3/g" "$0"
	exit 0
	;;
	*) echo -e "$GCHMSG075"
		exit 0
	;;
   esac
exit 0
;;
	-ug|--upgrade)
   # UPD gcHistory
	wget -O "$GCVD" -q https://github.com/elppans/gcHistory/raw/master/.vdate
	GCVDC=`cat "$GCVD"`

if [ -e "$GCVD" ];then
if [ "$vdate" != "$GCVDC" ];then
	cd "$GCPMD"
	git fetch origin
	git reset --hard origin/master
	git pull
	chmod +x "$GCPMD/gcHistory"
	chmod +x "$WINDIR/wine-csmt"
	$CPYNC "$GCPMD/gcHistory" "$PWDIR"
##
    if ( whereis nproc | grep bin ) >> /dev/null ;then
	NCPU=`nproc`
      else
	NCPU=$(cat /proc/cpuinfo | egrep "core id|physical id" | tr -d "\n" | sed s/physical/\\nphysical/g | grep -v ^$ | sort | uniq | wc -l)
    fi

	ECPU=1

    if [ "$NCPU" -gt "$ECPU" ];then
	regedit gcmd/CSMTON_PSMOFF.reg
     else
	regedit gcmd/CSMTOFF_PSMOFF.reg
fi
##
fi
fi
   # UPD gcHistory FIM
   	exit 0
  ;;
	-u|--update)
	echo "Atualizando a aplicação, aguarde..."
	read -t 5
	cd "$GCPMD"
	git fetch origin
	git reset --hard origin/master
	git pull
	chmod +x "$GCPMD/gcHistory"
	chmod +x "$WINDIR/wine-csmt"
	$CPYNC "$GCPMD/gcHistory" "$PWDIR"
	clear
	echo -e "Atualização concluída..."
	read -t 5
  ;;
	-V|-v|--version)
	"$WINEX" --version
	echo "`which --show-tilde "$0"` "$vdate""
	exit 0
  ;;
	-h|--help)
	echo "$GCHMSG067"
	exit 0
  ;;
	*)
	echo "$GCHMSG068"
	exit 0
	;;
 esac
fi
